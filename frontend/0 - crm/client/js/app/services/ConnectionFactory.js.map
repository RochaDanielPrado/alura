{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolv","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,e;AACTC,mB,GAAU,C;AACVC,kB;AAEFC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,iEAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,MAAD,EAASC,MAAT,EAAoB;;AAEnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;;AAE3B,8CAAM,IAAIE,KAAJ,uDAAN;AACH,qCAHD;AAIH;;AAEDE,uCAAOL,UAAP;AAEH,6BAbD;;AAeAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,6BAND;AAQH,yBAjCM,CAAP;AAmCH;;;kDAEoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,yBAPD;AAUH;;;sDAEwB;;AAErB,4BAAI7B,UAAJ,EAAgB;;AAEZC;AACAD,yCAAa,IAAb;AACH;AAEJ","file":"ConnectionFactory.js","sourcesContent":["const stores = [`negociacoes`];\nconst version = 9;\nconst dbName = `aluraframe`;\n\nvar connection = null;\n\nvar close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error(`Não é possível criar instancias de ConnectionFactory`);\n    }\n\n    static getConnection() {\n\n        return new Promise((resolv, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n\n            };\n\n            openRequest.onsuccess = e => {\n\n                if (!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function () {\n\n                        throw new Error(`Você não pode fechar diretamente a conexão`);\n                    };\n                }\n\n                resolv(connection);\n\n            };\n\n            openRequest.onerror = e => {\n\n                console.log(e.target.error);\n\n                reject(e.target.error.name);\n\n            };\n\n        });\n\n    }\n\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, { autoIncrement: true });\n\n        });\n\n\n    }\n\n    static closeConnection() {\n\n        if (connection) {\n\n            close();\n            connection = null;\n        }\n\n    }\n\n}"]}